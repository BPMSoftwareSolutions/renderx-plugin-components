{
  "metadata": {
    "type": "react",
    "name": "React",
    "version": "1.0.0",
    "author": "RenderX Team",
    "description": "React component for paste-and-run TSX/JSX code execution in canvas",
    "category": "basic",
    "tags": ["react", "jsx", "tsx", "component", "code", "interactive"]
  },
  "ui": {
    "template": "<div class=\"rx-comp rx-react\">{{#if code}}<div class=\"rx-react-container\"></div>{{else}}<div class=\"rx-react-placeholder\">Drop React code here</div>{{/if}}</div>",
    "styles": {
      "css": ".rx-react { position: relative; background: var(--bg, #fafafa); border: 1px solid var(--border-color, #e5e7eb); border-radius: 8px; overflow: hidden; } .rx-react-container { width: 100%; height: 100%; } .rx-react-placeholder { display: flex; align-items: center; justify-content: center; color: var(--placeholder-color, #9ca3af); font-size: 14px; font-weight: 500; height: 100%; min-height: 60px; background: var(--placeholder-bg, #f9fafb); border: 2px dashed var(--placeholder-border, #d1d5db); border-radius: 6px; margin: 4px; }",
      "variables": {
        "bg": "#ffffff",
        "border-color": "#e5e7eb",
        "placeholder-color": "#9ca3af",
        "placeholder-bg": "#f9fafb",
        "placeholder-border": "#d1d5db"
      },
      "library": {
        "css": ".rx-lib .rx-react { background: linear-gradient(135deg, #61dafb, #21d4fd); color: #fff; border: none; box-shadow: 0 2px 8px rgba(0,0,0,0.15); } .rx-lib .rx-react-placeholder { background: rgba(255,255,255,0.1); border-color: rgba(255,255,255,0.3); color: rgba(255,255,255,0.9); } .rx-lib .rx-react::before { content: '⚛️'; position: absolute; top: 8px; right: 8px; font-size: 16px; opacity: 0.8; z-index: 1; }",
        "variables": {
          "preview-width": "240px",
          "preview-height": "120px"
        }
      }
    },
    "icon": {
      "mode": "emoji",
      "value": "⚛️",
      "position": "start"
    },
    "tools": {
      "drag": { "enabled": true },
      "resize": {
        "enabled": true,
        "handles": ["nw", "n", "ne", "e", "se", "s", "sw", "w"],
        "constraints": { "min": { "w": 120, "h": 80 } }
      }
    }
  },
  "integration": {
    "properties": {
      "schema": {
        "code": {
          "type": "string",
          "default": "export default function Hello() {\n  return (\n    <div style={{padding: 8, textAlign: 'center'}}>\n      <h3>Hello React!</h3>\n      <p>Edit this code in the Control Panel</p>\n    </div>\n  );\n}",
          "description": "React component code (TSX/JSX)",
          "required": true,
          "ui": {
            "control": "code",
            "language": "tsx",
            "rows": 12,
            "placeholder": "export default function MyComponent() {\n  return <div>Hello World</div>;\n}"
          }
        }
      },
      "defaultValues": {
        "code": "export default function Hello() {\n  return (\n    <div style={{padding: 8, textAlign: 'center'}}>\n      <h3>Hello React!</h3>\n      <p>Edit this code in the Control Panel</p>\n    </div>\n  );\n}"
      }
    },
    "canvasIntegration": {
      "resizable": true,
      "draggable": true,
      "selectable": true,
      "minWidth": 120,
      "minHeight": 80,
      "defaultWidth": 240,
      "defaultHeight": 120,
      "allowChildElements": false
    },
    "events": {
      "mount": {
        "description": "Triggered when the React component is mounted",
        "parameters": ["componentInstance", "elementData"]
      },
      "unmount": {
        "description": "Triggered when the React component is unmounted",
        "parameters": ["elementData"]
      },
      "error": {
        "description": "Triggered when there's an error in the React component",
        "parameters": ["error", "elementData"]
      }
    }
  },
  "template": {
    "render": { "strategy": "react" },
    "react": {
      "code": "export default function Hello() {\n  return (\n    <div style={{padding: 8, textAlign: 'center'}}>\n      <h3>Hello React!</h3>\n      <p>Edit this code in the Control Panel</p>\n    </div>\n  );\n}"
    },
    "classes": ["rx-comp", "rx-react"],
    "style": { "width": 240, "height": 120 }
  },
  "interactions": {
    "canvas.component.create": {
      "pluginId": "CanvasComponentPlugin",
      "sequenceId": "canvas-component-create-symphony"
    },
    "canvas.component.select": {
      "pluginId": "CanvasComponentSelectionPlugin",
      "sequenceId": "canvas-component-select-symphony"
    },
    "canvas.component.drag.move": {
      "pluginId": "CanvasComponentDragPlugin",
      "sequenceId": "canvas-component-drag-symphony"
    },
    "canvas.component.resize.start": {
      "pluginId": "CanvasComponentResizeStartPlugin",
      "sequenceId": "canvas-component-resize-start-symphony"
    },
    "canvas.component.resize.move": {
      "pluginId": "CanvasComponentResizeMovePlugin",
      "sequenceId": "canvas-component-resize-move-symphony"
    },
    "canvas.component.resize.end": {
      "pluginId": "CanvasComponentResizeEndPlugin",
      "sequenceId": "canvas-component-resize-end-symphony"
    }
  }
}
